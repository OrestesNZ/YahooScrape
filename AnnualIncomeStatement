from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import pandas as pd 

# Create a WebDriver instance for Chrome
driver = webdriver.Chrome(ChromeDriverManager().install())

# Set up ChromeOptions
chrome_options = Options()
chrome_options.add_argument('--headless')  # Run in headless mode to avoid opening a visible browser window

# Navigate to a webpage
driver.get("https://finance.yahoo.com/quote/MSFT/financials")

# Find an element by its ID (you may need to adjust the ID based on the structure of the webpage)
element = driver.find_element("id", "mrt-node-Col1-1-Financials")

# Display the text content of the element
#print("Text Content:", element.text)

# Extract and split the text content into lines
lines = element.text.split('\n')

# Close the browser
driver.quit()

# Identify the start and end indices for data extraction
start_index = lines.index('Total Revenue')
end_index = lines.index('Tax Effect of Unusual Items')

# Extract relevant data between start and end indices
data_lines = lines[start_index:end_index]

# Organize the data into a list of lists
organized_data = [line.split() for line in data_lines]
#words_and_numbers = [item.split() for sublist in organized_data for item in sublist]

# Process each sublist in organized_data accordingly
for i, item in enumerate(organized_data):
    organized_data[i] = [' '.join(item)] if i % 2 == 0 else item

#organized_data

# Use even-indexed sublists as the index for the DataFrame
index = [organized_data[i][0] for i in range(0, len(organized_data), 2)]

#index

# Create a pandas DataFrame
# manually entered because the scraped format is annoying.
columns = ['TTM', '6/29/2023', '6/29/2022', '6/29/2021', '6/29/2020']

# Adjust the list comprehension to handle varying sublist lengths
data = {column: [organized_data[i][j] if j < len(organized_data[i]) else '' for i in range(1, len(organized_data), 2)] for j, column in enumerate(columns)}                       

df = pd.DataFrame(data, columns=columns, index=index)

